final t = Translations.of(context); // there is also a static getter without context

String a = t.mainScreen.title;                         // simple use case
String b = t.game.end.highscore(score: 32.6);          // with parameters
String c = t.items(n: 2);                              // with pluralization
String d = t.greet(name: 'Tom', context: Gender.male); // with custom context
String e = t.intro.step[4];                            // with index
String f = t.error.type['WARNING'];                    // with dynamic key
String g = t['mainScreen.title'];                      // with fully dynamic key
TextSpan h = t.greet(name: TextSpan(text: 'Tom'));     // with RichText

PageData page0 = t.onboarding.pages[0];                // with interfaces
PageData page1 = t.onboarding.pages[1];
String i = page1.title; // type-safe call# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FLUTTER_VERSION_OLDEST: "3.0.5"
  FLUTTER_VERSION_NEWEST: "3.24.1"

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION_NEWEST }}
          channel: "stable"

      - name: Dependencies (core)
        working-directory: slang
        run: dart pub get
      - name: Check format (core)
        working-directory: slang
        run: dart format --set-exit-if-changed lib bin test
      - name: Analyze (core)
        working-directory: slang
        run: flutter analyze

      - name: Dependencies (gpt)
        working-directory: slang_gpt
        run: dart pub get
      - name: Check format (gpt)
        working-directory: slang_gpt
        run: dart format --set-exit-if-changed lib bin test
      - name: Analyze (gpt)
        working-directory: slang_gpt
        run: flutter analyze

  test:
    name: Test (newest Flutter version)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION_NEWEST }}
          channel: "stable"

      - name: Dependencies (flutter)
        working-directory: slang_flutter
        run: flutter pub get
      - name: Test (flutter)
        working-directory: slang_flutter
        run: flutter test

      # The compilation test needs "pub get" to be run for Flutter first.
      # That's why we run the core tests after the Flutter tests.
      - name: Dependencies (core)
        working-directory: slang
        run: dart pub get
      - name: Test (core)
        working-directory: slang
        run: dart test

      - name: Dependencies (gpt)
        working-directory: slang_gpt
        run: dart pub get
      - name: Test (gpt)
        working-directory: slang_gpt
        run: dart test

  test_legacy:
    name: Test (oldest Flutter version)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION_OLDEST }}
          channel: "stable"

      - name: Dependencies (flutter)
        working-directory: slang_flutter
        run: flutter pub get
      - name: Test (flutter)
        working-directory: slang_flutter
        run: flutter test

      # The compilation test needs "pub get" to be run for Flutter first.
      # That's why we run the core tests after the Flutter tests.
      - name: Dependencies (core)
        working-directory: slang
        run: dart pub get
      - name: Test (core)
        working-directory: slang
        run: dart test

      - name: Dependencies (gpt)
        working-directory: slang_gpt
        run: dart pub get
      - name: Test (gpt)
        working-directory: slang_gpt
        run: dart test
